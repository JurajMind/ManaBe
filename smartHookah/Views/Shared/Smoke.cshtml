@using System.Configuration
@using smartHookah.Controllers
@using smartHookah.Models
@using smartHookah.Models.Db
@using smartHookah.Support
@model smartHookah.Controllers.SmokeViewModel

@functions {

}

@{
    var status = Model.State ? "Online" : "Offline";
    ViewBag.Title = $"{Model.Hookah.Name} - {status}" ;

}
@Scripts.Render("~/bundles/copyjs")


<div id="smokeProgressBar" class="row card card-body" style="position: relative">
    <div>   <div id="smokeProgress" data-max="0" data-curent="0"> </div></div>
    <div class="row">
        <div class="col-md-6 col-xs-8">
            <div id="state" data-value="@Model.CurentState.ToGraphData()" style="display: inline-grid;">
                <span style="font-weight: bold; font-size: 28px">@Model.CurentState.ToWebStateString()</span>
                <span style="font-weight: bold; font-size: 20px" id="curentTime"></span>
            </div>
        </div>

        <div class="col-md-2 offset-md-4 col-xs-4" style="display: inline-grid">
            <span style="font-weight: bold; font-size: 28px" id="pufCount">0</span>
            <span style="font-size: 20px" class="tobaccoStamina"> 100.00 % </span>
        </div>
    </div>
</div>

@using (Ajax.BeginForm("GetLiveSmokeStatics", "SmokeSession",
                                                                                    new AjaxOptions
                                                                                    {
                                                                                        Url = Url.Action("GetLiveSmokeStatics", "SmokeSession"),
                                                                                        HttpMethod = "POST",
                                                                                        InsertionMode = InsertionMode.Replace,
                                                                                        UpdateTargetId = "statistic",
                                                                                        OnSuccess = "OnSmokeStaticsSuccessAjax"
                                                                                    }, new { @id = "statisticForm" }))
{
    <input type="hidden" value="@Model.SessionId" name="sessionId" />
    <input type="hidden" value="@Model.Session.Id" name="smokeSessionId" />
}

<div class="card">
    <div class="card-header">
        @*<ul class="nav nav-tabs" style="padding-bottom: 15px;" role="tablist">
            <li><a class="nav-link active"data-toggle="pill" href="#home">Live&nbsp;<i class="fa fa-circle-thin"></i></a></li>
            <li><a  class="nav-link" data-toggle="pill" href="#menu1">Session information&nbsp;<i class="fa fa-info-circle"></i></a></li>
            <li><a class="nav-link" data-toggle="pill" href="#reviewTab">Session review&nbsp;<i class="fa fa-pencil-square-o"></i></a></li>
            @if (!Model.Share)
            {
                <li><a class="nav-link" data-toggle="pill" href="#menu2">  Animations&nbsp;<i class="fa fa-cog"></i></a></li>
            }
        </ul>*@
        
        <ul class="nav nav-tabs card-header-tabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active"  data-toggle="tab" href="#Live">@Smoke.SmokeSession.live</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#Info">@Smoke.SmokeSession.information</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#Reviews">@Smoke.SmokeSession.review</a>
            </li>
            
            @if (!Model.Share)
            {
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#Animations">@Smoke.SmokeSession.animation</a>
                </li>
            }
      
        </ul>

    </div>

    <div class="tab-content card-body container">
        <div id="Live" class="tab-pane active" role="tabpanel">
            
                
                    <div id="statistic"></div>
                    <a class="btn btn-info btn-raised" href="@Url.Action("Snow" ,"Game",new {id = Model.SessionId})">Snow game&nbsp;<i class="fa fa-snapchat-ghost"></i></a>
           
        </div>


        <div id="Info" class="tab-pane" role="tabpanel">

            <div class="panel panel-default">
                <div>
                    @{
                        var metadataAndReview = new MetadataAndReviewModel();
                        metadataAndReview.MetaData = Model.MetaData;
                        metadataAndReview.Review = Model.SessionReview;
                    }                  
                    <div>
                    
                        <div id="metaDataTable">
                            @Html.Partial("smokeSessionMetaData", Model.MetaData)
                        </div>
                    </div>
                </div>
            </div>
            @if (!Model.Share)
            {
                <hr />

                <button type="button" class="btn btn-primary btn-raised" data-toggle="modal" data-target="#metaDataModal">
                    @Smoke.SmokeSession.editSmokeSessionMetadata
                </button>
            }
        </div>


        <div id="Reviews" class="tab-pane" role="tabpanel">
                @Html.Partial("~/Views/TobaccoReviews/_TobaccoReview.cshtml")
        </div>

        @if (!Model.Share)
        {
            <div id="Animations" class="tab-pane" role="tabpanel">
              
                    <div>

                        <div style="display: @(Model.Hookah.Type == StandType.SenzorOnly ? "none" : "block") "> @Html.Partial("~/Views/DeviceControl/GetDeviceSetting.cshtml", Model.StandSetting)</div>
                        <div class="row">
                            
                            @section dropmenu
                            {
                                <a class="btn btn-danger" onclick="AssignPerson(false)" href="#" style="@(Model.IsAssigned ? "" : "display:none;")">
                                    @Smoke.SmokeSession.un_assign <i class="fa fa-minus"></i>
                                </a>
                                <a class="btn btn-danger" href="@Url.Action("EndSmokeSession", "SmokeSession", new {id = Model.SessionId})">@Smoke.SmokeSession.endSmokeSession&nbsp;<i class="fa fa-power-off"></i></a>
                                <button class=" btn btn-danger" onclick="Restart()">@Smoke.SmokeSession.restart</button>
                            }
                        </div>
                    </div>

                </div>
         
        }
    </div>
</div>


@if (!Model.Share)
{
    @section modals
    {

        <div class="metadataModalWraper">@Html.Partial("smokeMetaDataModal", Model.SmokeMetadataModalModal)</div>


        <div class="modal fade" id="smokeCodeModal">
            <div class="modal-dialog" role="dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <h4 class="modal-title">Smoke session codes</h4>
                    </div>
                    <div class="modal-body">

                        @Html.QRCode(@Url.Action("SmokeSession", "SmokeSession", new {id = Model.Session.SessionId}, this.Request.Url.Scheme), 256, 2, QrCodeHelper.QRCodeErrorCorrectionLevel.High)
                        <h1>Code:@Model.Session.SessionId</h1>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>


                    <!-- /.modal-content -->

                </div>
                <!-- /.modal-dialog -->
            </div>
        </div>
    }

}

@if(User.Identity.IsAuthenticated) { 
<nav class="button-assign-container">
    <a class="assb button mainShareBtn" href="#" onClick="return false;" style=" @(Model.IsAssigned ? "display:none;" : "") ">
        <span class="buttons" tooltip="Assign" style="background-color: #4caf50" onclick="AssignPerson(true)">
            <span class="rotate"></span>
            <i class="fa fa-plus"></i>
        </span>
    </a>
</nav>
 }

<nav class="button-share-container">
    
    
    <a href="#" onclick="$('#smokeCodeModal').modal('show')" class="buttons" tooltip="ShareCode"> <i class="fa fa-qrcode"></i> </a>

    <a target="_blank" href="http://twitter.com/intent/tweet?text=Manapipes+smoke+session&url=@ShareHelper.GetFbShareLink(Model.ShareToken)" class="buttons" tooltip="Share on Twitter"> <i class="fa fa-twitter"></i> </a>


    @*<a target="_blank" href="mailto:?subject=' + escape('Have a look at this website') + '&body=' + escape('https://www.surfsearchspot.com/?p=16024" class="buttons" tooltip="Share on Email"> <i class="fa fa-envelope"></i> </a>*@

    <a href="#" data-clipboard-text="@ShareHelper.GetFbShareLink(Model.ShareToken)" class="buttons copyBtn" tooltip="Copy share link"> <i class="fa fa-copy"></i> </a>

    <a href="#" onclick="shareMsg()" class="buttons shareFbBtn" tooltip="Share on Messenger"> <i class="fa fa-comments"></i> </a>

    <a href="#" onclick="shareFb()" class="buttons shareFbBtn" tooltip="Share on Facebook"> <i class="fa fa-facebook"></i> </a>


    <a class="button mainShareBtn" href="#" onClick="return false;">
        <span class="buttons" tooltip="Share">
            <span class="rotate"></span>
            <i class="fa fa-share-alt"></i>
        </span>
    </a>

</nav>



@section scripts {


    <script type="text/javascript">




        window.mobilecheck = function() {
            var check = false;
            (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
            return check;
        };

        var a;
        new Clipboard('.copyBtn');
        var progressTimer;
        var curentProgress = 0;

        function progressStart() {
            progressTimer = setInterval(UpdateProgressBar, 30);

        }

        $('a[href="#Info"]').on('shown.bs.tab', function(){
            if ($('#mixChart:visible').length === 1) {
                DrawnMixChart('mixChart');
            }
        });

        function shareFb() {

            FB.ui({
                    name: "ManaPipe",
                    description: 'Check out my smoke session',
                    pictures: 'http://app.manapipes.com/Content/images/icons/icon-96x96.png',
                    method: 'share',
                    mobile_iframe: true,
                    href: '@ShareHelper.GetFbShareLink(Model.ShareToken)'

                },
                function(response) {});

            return false;

        }

        function shareMsg() {
            @{
                var fbKey = ConfigurationManager.AppSettings["fbAppId"];
            }
            if (typeof window.orientation !== 'undefined' || window.mobilecheck()) {
                window.open('fb-messenger://share?link=' +
                    '@ShareHelper.GetFbShareLink(Model.ShareToken)'  +
                    '&app_id=' +
                    encodeURIComponent(@fbKey));
            } else {
                FB.ui({
                    method: 'send',
                    name: "ManaPipe",
                    pictures: 'http://app.manapipes.com/Content/images/icons/icon-96x96.png',
                    link: '@ShareHelper.GetFbShareLink(Model.ShareToken)',
                    description: 'Check out my smoke session',
                });
            }


            return false;

        }


        function progressEnd() {
            clearInterval(progressTimer);
            curentProgress = 0;
            //$('#curentTime').empty();
            //$('#curentTime').css('background-color', "");
        }

        function getColor(value) {
            //value from 0 to 1
            var hue = ((1 - value) * 120).toString(10);
            return ["hsl(", hue, ",100%,50%)"].join("");
        }

        function UpdateProgressBarVal(value) {
            var $progress = $('#smokeProgress');
            if (value <= 1)
                $progress.css('width', value * 100 + '%');
            $progress.css('background-color', getColor(value));
        }

        function UpdateProgressBar() {
            if ($('#state').data('value') === 0) {
                progressEnd();
                return;
            }
            curentProgress = curentProgress + 30;
            var max = $('#smokeProgress').data('max');
            UpdateProgressBarVal(curentProgress / max);
            var $curentSmokeTime = $('#curentTime');
            $curentSmokeTime.empty();
            $curentSmokeTime.append(moment.duration(curentProgress).format("s.SSS") + ' sec.');
        }

        function UpdateStaticTime() {
            var $ssStart = $('#smokeSessionStart');
            var start = moment.utc($ssStart.data('time'), "DD-MM-YYYY HH:mm:ss").local();
            $ssStart.empty();
            $ssStart.append(start.format('HH:mm:ss'));
        }

        function OnSmokeStaticsSuccess() {
            UpdateStaticTime();
            UpdateSmokeDuration();
            $('#smokeProgress').data('max', $('#longestPuf').val() * 1.25);
            UpdateSmokeStamina();
        }

        function OnSmokeStaticsSuccessAjax() {
            OnSmokeStaticsSuccess();
            $('#curentTime').text($('#lastDuration').text());
        }

        function UpdateSmokeStamina() {
            var pufCount = $('.pufCount').text();
            var stamina = $('#tobaccoEstimated').val();
            var estimated = (100 - (pufCount / stamina)*100).toFixed(2);
            $('.tobaccoStamina').text(estimated + ' %');
            $('#pufCount').text(pufCount);
            $('.lastDuration').text($('#lastDuration').text);
        }

        function UpdateSmokeDuration() {
            var $ssStart = $('#smokeSessionStart');
            var $ssDuration = $("#smokeSessionDuration");
            if ($ssDuration.length == 0)
                return false;

            var $lastPufTime = $('#lastPufTime');

            var start = moment.utc($ssStart.data('time'), "DD-MM-YYYY HH:mm:ss").local();

            var lastPuf = moment.utc($lastPufTime.data('time'), "DD-MM-YYYY HH:mm:ss").local();
            var now = moment();
            var span = moment.duration(now.diff(start));
            var timeFormat = span.format('HH:mm:ss');

            $ssDuration.empty();
            $ssDuration.append(timeFormat);

            $lastPufTime.empty();
            $lastPufTime.append(' (' + lastPuf.from(now) + ')');
        }

        function SaveSmokeMetadataSucess(data) {
            console.log(data);
            $('#metaDataTable').html(data);
            $('#metaDataModal').modal('hide');
            $('#tobacoReview').show();
            if ($('#mixChart').length === 1) {
                DrawnMixChart('mixChart');
            }
        }

        function SaveReviewSuccess(data)
        {
            if (data.success === true) {
                $('#reviewTable').html(data.page);
                $('.rating').rating({
                    readonly:true
                });
                $('#tobacoReviewModal').modal('hide');

            } else {
                window.alert(data.msg);
            }

        }

        $(window).on('load', function() {
            DrawnMixChart('mixChart');
        });

        $(window).resize(function() {
            clearTimeout(window.resizedFinished);
            window.resizedFinished = setTimeout(function(){
                header = Math.max($('.navbar').height(), $('.navbar-header').height());
                stickyHeaderTop = $('#smokeProgressBar').offset().top - header;

            }, 250);
        });
        var header = 0;
        var stickyHeaderTop = 0;
        $(function() {


            // header = Math.max($('.navbar').height(), $('.navbar-header').height());
            //stickyHeaderTop = $('#smokeProgressBar').offset().top;

            //$(window).scroll(function () {
            //    if ($(window).scrollTop() > stickyHeaderTop) {
            //        $('#smokeProgressBar').css({
            //            position: 'fixed',
            //            top: header+'px',
            //            width: '100%',
            //            zIndex: '40',
            //        });
            //        $('#othercontent').css('margin-top', $('#stickyheader').outerHeight(true) + parseInt($('#unstickyheader').css('marginBottom')));
            //    } else {
            //        $('#smokeProgressBar').css({
            //            position: 'static',
            //            top: '0px'
            //        });
            //        $('#othercontent').css('margin-top', '0px');
            //    }
            //});
            @{
                var h = (double) Model.Hookah.Setting.Color.Hue/255;
                var s = (double) Model.Hookah.Setting.Color.Saturation/255;
                var v = (double) Model.Hookah.Setting.Color.Value/255;
            }
            $('#color').wheelColorPicker('setHsv', @h.ToString(System.Globalization.CultureInfo.InvariantCulture),
                @s.ToString(System.Globalization.CultureInfo.InvariantCulture),
                @v.ToString(System.Globalization.CultureInfo.InvariantCulture));

            setInterval(UpdateSmokeDuration, 1000);
            $('#PackType').attr('name', 'PackType');
            $('#HeatKeeper').attr('name', 'HeatKeeper');
            $('#statisticForm').submit();
            var hub = $.connection.smokeSessionHub;

            hub.client.updateStats = function(stats) {

                if($('#lastPufTime').length ===0)
                {
                    $('#statisticForm').submit();
                    return true;
                }
                //.add(-1,'h')
                $('#lastPufTime').data('time',moment(stats.LastPufDuration,"").add(-2,'h').format('DD-MM-YYYY HH:mm:ss'));
                $('#pufCount').text(stats.PufCount);
                $('#lastDuration').text(stats.lastPuf+' sec.');
                $('#curentTime').text(stats.lastPuf+' sec.');
                $('#longestPufsec').text(stats.longestPuf+' sec.');
                $('#longestPuf').val(stats.longestPufMilis);
                $('#smokeDuration').text(stats.smokeDuration);
                OnSmokeStaticsSuccess();
            }

            hub.client.pufChange = function (direction, directionGraphValue) {

                if (directionGraphValue === 1) {
                    $('#state span').text('@Html.Raw(Smoke.SmokeSession.smoking)');
                }

                if (directionGraphValue === -1) {
                    $('#state span').text('@Html.Raw(Smoke.SmokeSession.blowing)');
                }

                if (directionGraphValue === 0) {
                    $('#state span').text('@Html.Raw(Smoke.SmokeSession.waiting)');
                }


                //$('#state span').text(direction);
                $('#state').data('value', directionGraphValue);

                if (directionGraphValue === 0) {
                    // $('#statisticForm').submit();
                }

                if (directionGraphValue === 1) {
                    progressStart();
                    var count =
                        (parseInt($('.pufCount').text())) + 1;

                    $('.pufCount').text(count);

                } else {
                    progressEnd();
                }
            }

            hub.client.serviceRequest = function() {
                $('#Live').css("color", "red");
                setTimeout(function() {   //calls click event after a certain time
                    $('#Live').css("color", "");
                }, 3000);
            }
            $.connection.hub.start()
                .done(function() {
                    hub.server.joinSession('@Model.SessionId');
                });

            $.connection.hub.disconnected(function() {
                console.log("disconected");
                progressEnd();
                setTimeout(function() {
                        $.connection.hub.start()
                            .done(function() {
                                hub.server.joinSession('@Model.SessionId');
                            });
                        console.log("reconect");
                        $('#statisticForm').submit();
                    },
                    5000); // Re-start connection after 5 seconds
            });

            if ($('#colorpicker').length != 0)
                $('#colorpicker').farbtastic('#color');
        });


        function SendColor() {
            var color = $('#color').wheelColorPicker('getColor');
            console.log(color);
            SendComand("color", JSON.stringify(color));
        }

        @*function SendComand(cmd, data) {
            console.log(cmd + ':' + data);
            $.ajax({
                type: "POST",
                url: '@Url.Action("Sent", "DeviceControl", new {id = @Model.SessionId})',
                data: { 'command': cmd, 'data': data },
                dataType: 'json'
            });
        }*@

        function AssignPerson(assign) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("AssignPerson", "SmokeSession", new {id = @Model.SessionId})',
                data : {'assign':assign},
                dataType: 'json',
                success : function(data) {
                    if (data.success) {
                        $('.assb').toggle();
                    }
                }
            });
        }


        function ModeChanged() {
            SendComand('mode', $('#ModeSelector').val());
        }

        function AnimationChanged(index, value) {
            SendComand('led', index + ':' + $('#' + value).val());
        }

        function hexToRgb(hex) {
            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex,
                function(m, r, g, b) {
                    return r + r + g + g + b + b;
                });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result
                ? {
                    r: parseInt(result[1], 16),
                    g: parseInt(result[2], 16),
                    b: parseInt(result[3], 16)
                }
                : null;
        }

        function DrawnGraph() {}

    </script>
}

