@using smartHookah.Helpers
@using smartHookah.Migrations
@using Westwind.Globalization
@using System.Globalization
@model smartHookah.Controllers.CreateReservationModel

@{
    var dayName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(CultureInfo.CurrentCulture.DateTimeFormat.DayNames[(int)DateTime.Now.DayOfWeek]);
    ViewBag.Title = @Model.place.Name + $" - <span id='titleDay'>{dayName}</span> <span id='titleDate'>{DateTime.Now.ToString("d.M.yyyy")}</span>";

}
@Styles.Render("~/Content/gij")

<style>


    .container {
        max-width: 99%;
    }

    td.timeSlot:hover {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
        opacity: 0.9;
    }

    td.timeSlot.taken {
        background-color: #f44336;
    }

    td.timeSlot.confirmed {
        background-color: yellow;
    }

    td.timeSlot.visitconfirmed {
        background-color: #03a9f4;
    }

    td.timeSlot.over {
        opacity: 0.5;
    }

    td.timeSlot.free {
        background-color: #4caf50;
    }

    td.timeSlot.selected {
        box-shadow: 0 14px 28px rgba(0,0,0,0.6), 0 10px 10px rgba(0,0,0,0.5);
        border-color: black;
        border-width: 2px 0 0 2px;
        opacity: 0.9;
        cursor: move;
        font-weight: bold;
    }

    td.timeSlot.free.selected {
        box-shadow: 0 14px 28px rgba(0,0,0,0.6), 0 10px 10px rgba(0,0,0,0.5);
        border-color: black;
        border-width: 2px 0 0 2px;
        opacity: 0.9;
        background-color: aliceblue;
        cursor: default;
    }


    td.timeSlot {
        border: 1px solid;
    }

    td.tableCapacity {
        font-weight: bold;
    }

    .controlls {
        float: right;
    }

    ul.canceled {
        column-count: 4;
        list-style-type: none;
    }

    .bmd-drawer-f-l > .bmd-layout-drawer {
        top: 0 !important;
        left: 0 !important;
        width: 240px !important;
        height: 100% !important;
        -webkit-transform: translateX(-250px) !important;
        -ms-transform: translateX(-250px) !important;
        -o-transform: translateX(-250px) !important;
        transform: translateX(-250px) !important;
    }

    .bmd-drawer-f-l > .bmd-layout-header, .bmd-drawer-f-l > .bmd-layout-content {
        margin-left: 0 !important;
    }

    .bmd-layout-header > .navbar {
        min-height: 3rem;
    }

    button.navbar-toggler {
        display: inline-block !important;
    }

    header.bmd-layout-header {
        width: 100% !important;
    }

    @@media (max-width: 1400px) {

        .table th, .table td {
            padding: 0.5rem;
        }
    }
</style>

<div id="app">
    <div class="card">
        <div class="card-body">

            <div class="row">
                <div class="form-group col-md-2">
                    <label><i class="fa fa-calendar"></i>&nbsp;@LocalizationHelper.Translate("date", "Reservation")</label>
                    <input id="datepicker" class="form-control" />
                    <div>
                        <button class="btn btn-sm btn-raised" onclick="changeDate(-1)"><i class="fa fa-chevron-left"></i></button>
                        <button class="btn btn-sm btn-raised" onclick="$('#datepicker').datepicker().value(moment().format('DD.MM.YYYY'))">@LocalizationHelper.Translate("today", "Reservation")</button>
                        <button class="btn btn-sm btn-raised" onclick="changeDate(1)"><i class="fa fa-chevron-right"></i></button>
                    </div>
                </div>

                <div class="form-group col-md-2">
                    <label><i class="fa fa-clock-o"></i>@LocalizationHelper.Translate("place", "Reservation")</label>
                    <select v-model="Selected.Table" class="form-control" v-cloak>
                        <option v-for="time in Reservations.Tables" :value="time.Id">{{time.Name}}</option>
                    </select>
                </div>
                <div class="form-group col-md-1">
                    <label><i class="fa fa-clock-o"></i>@LocalizationHelper.Translate("time", "Reservation")</label>
                    <select v-model="Selected.Time" class="form-control" v-cloak>
                        <option v-for="time in Reservations.TimeSlots" :value="time.Value">{{time.Text}}</option>
                    </select>
                </div>
                <div class="form-group col-md-1">
                    <label><i class="fa fa-users">@LocalizationHelper.Translate("persons", "Reservation")</i></label>
                    <select v-model="Selected.Persons" name="persons" class="form-control" v-cloak>
                        <option v-for="n in 8" :value="n">{{n}}</option>
                        <option value="100">100</option>
                    </select>
                </div>

                <div class="form-group col-md-1">
                    <label><i class="fa fa-clock-o"></i>@LocalizationHelper.Translate("visitDuration", "Reservation")</label>
                    <select v-model="Selected.Duration" class="form-control" v-cloak>
                        <option v-for="time in Reservations.Times" :value="time.Key">{{time.Value}}</option>
                    </select>
                </div>

                <div class="form-group col-md-1">
                    <label for="exampleTextarea" class="bmd-label-static">@LocalizationHelper.Translate("name", "Reservation")</label>
                    <input type="text" class="form-control" v-model="Selected.Name" id="exampleTextarea" rows="3" />
                </div>

                <div class="form-group col-md-1">
                    <label for="exampleTextarea" class="bmd-label-static">@LocalizationHelper.Translate("message", "Reservation")</label>
                    <textarea class="form-control" v-model="Selected.Text" id="exampleTextarea" rows="3"></textarea>
                </div>
                <div class="col-md-3">
                    <button v-if="canCreateReservation" class="btn btn-success btn-raised" v-on:click="postReservation()"><i class="fa fa-plus-circle"></i>&nbsp;@LocalizationHelper.Translate("create", "Reservation")</button>
                    <button v-if="canCreateReservation" class="btn btn-success btn-raised" v-on:click="clearReservation()"><i class="fa fa-eraser"></i></button>
                    <div v-if="!canCreateReservation">
                        <div v-if="selectedReservationStatus == 3">
                            <a v-on:click="changeReservationStatus(4)" class="btn btn-success btn-raised"><i class="fa fa-heart"></i>&nbsp;@LocalizationHelper.Translate("visit", "Reservation")</a>
                            <a v-on:click="changeReservationStatus(7)" v-if="selectedReservationStatus == 3" class="btn btn-danger btn-raised"><i class="fa fa-bomb"></i>&nbsp;@LocalizationHelper.Translate("noVisit", "Reservation")</a>
                            <br />
                        </div>
                        <a v-if="selectedReservationStatus == 6 || selectedReservationStatus == 5  " v-on:click="changeReservationStatus(3)" class="btn btn-success btn-raised"><i class="fa fa-check"></i>&nbsp;@LocalizationHelper.Translate("confirm", "Reservation")</a>
                        <a v-on:click="changeReservation() " class="btn btn-warning btn-raised btn-sm"><i class="fa fa-edit"></i>&nbsp;@LocalizationHelper.Translate("change", "Reservation")</a>

                        <a v-on:click="addTableStart()" class="btn btn-info btn-raised btn-sm" v-bind:class="{ 'btn-success': AddTableMode }"> <i class="fa fa-plus-circle"></i>&nbsp;@LocalizationHelper.Translate("addTable", "Reservation")</a>
                        <a v-on:click="cancelReservation()" class="btn btn-danger btn-raised btn-sm"><i class="fa fa-trash"></i>&nbsp;@LocalizationHelper.Translate("cancel", "Reservation")</a>
                    </div>
                </div>
            </div>




            <div class="table-responsive">
                <table class="table table-bordered reservationTable">
                    <thead>
                        <tr>
                            <th>@LocalizationHelper.Translate("table", "Reservation")</th>
                            <th><i class="fa fa-users"></i></th>
                            <th v-for="time in Reservations.TimeSlots">{{time.Text}}</th>
                        </tr>
                    </thead>

                    <tr is="reservation-row" v-for="item in Reservations.Tables" :key="item.Id"
                        v-bind:table="item" v-bind:times="Reservations.Reservations[item.Id]"
                        v-bind:reservations="Reservations.TodayReservation" v-bind:selected="Selected" v-bind:selection="selection"></tr>


                </table>
            </div>

            <hr />


        </div>
        <div class="card-footer">

        </div>
    </div>
    <div>
        <div class="card-deck">
            <div class="card">
                <h4 class="card-header">@LocalizationHelper.Translate("canceledReservation", "Reservation")</h4>
                <div class="card-body">
                    <ul class="canceled">
                        <li v-for="canceled in Reservations.Canceled">
                            <i class="fa" v-bind:class="[canceled.State == 7 ? 'fa-bomb':'', canceled.State == 1 ? 'fa-trash':'' ]"></i>
                            {{canceled.TimeText}} :
                            <span v-if="Reservations.Times[canceled.TimeSlots]">{{Reservations.Times[canceled.TimeSlots].Value}}</span>
                            {{canceled.Name}}
                            <i class="fa fa-undo" v-on:click="changeReservationStatus(3,canceled.Id)"></i>

                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>


</div>
@Scripts.Render("~/bundles/gij")
@Scripts.Render("~/bundles/vue")
@Scripts.Render("~/bundles/babel")
@section scripts
{
    <script type="text/javascript">
    var hub = $.connection.reservationHub;
    Timer:null,
        $(function() {
            $('#datepicker').datepicker({
                showOtherMonths: true,
                weekStartDay: 1,
                uiLibrary: 'materialdesign',
                format: 'dd.mm.yyyy',
                locale: '@LocalizationHelper.getCurentCultureString()',
                value: moment().format('DD.MM.YYYY'),
                change: function() {
                    v.dateChanged();
                }
            });
        })

    var placeId = @Model.place.Id;

    function changeDate(offset) {
        $('#datepicker').datepicker().value(moment($('#datepicker').datepicker().value(),'DD.MM.YYYY').add(offset, 'days').format('DD.MM.YYYY'));
    }

    Vue.component('reservation-row',
        {
            props: ["table", "times", "reservations", "selected", "selection"],
            template:
                `<tr>
                        <td>{{table.Name}}</td>
                        <td class='tableCapacity'>{{table.Capacity}}</td>
                        <reservation-colunm
                            v-for="(time,index) in timesOrder"
                            :key="index"
                            v-bind:table="table"
                            v-bind:timeSlot="time"
                            v-bind:index="index"
                            v-bind:reservation="reservations[time.Id]"
                            v-bind:selected="selected" v-bind:selection="selection">
                        </reservation-colunm>

                        </tr>
                    `,
            computed: {
                timesOrder: function() {

                    function compare(a, b) {

                        var aValue = a.Value > 400 ? a.Value : a.Value + 3000;
                        var bValue = b.Value > 400 ? b.Value : b.Value + 3000;
                        if (aValue < bValue)
                            return -1;
                        if (aValue > bValue)
                            return 1;
                        return 0;
                    }

                    return this.times.sort(compare);
                }

            }

        });

        Vue.component('reservation-colunm',
            {
                props: ["table", "timeSlot", "index", "reservation", "selected", "selection"],
                template:
                `
            <td v-on:dragstart="dragStart($event)" v-on:dragend="dragEnd()" :draggable="check" v-bind:colspan="colSpan" v-if="display" class="timeSlot taken" v-on:click="onTakenClick()" v-bind:class="[stateText,check ? 'selected' : '']">
                                 <div v-if="colSpan !== 0">
                                {{reservation.Name}}&nbsp;<i class="fa fa-user"></i>{{reservation.Persons}} ({{table.Capacity - reservation.Persons}} )
                                    <i v-if="reservation.Message" class="fa fa-comment"  data-toggle="tooltip" data-placement="bottom" :title="reservation.Message"> </i>
                                        <div class="controlls" v-if="check && unconfirmed" >
                                        <i style="cursor:pointer" class="fa fa-check" v-on:click="confirmReservation()"></i>
                                        </div>
                                         <div class="controlls" v-if="check && unvisited" >
                                        <i style="cursor:pointer" class="fa fa-heart" v-on:click="confirmVisit()"></i>
                                    </div>
                                </div>

              
                        </td>
                          <td v-on:drop="drop($event)" v-on:dragover="allowDrop($event)"   v-on:dragenter="dragEnter()"  v-on:dragleave="dragLeave()"  v-else-if="!timeSlot.Reserved"  v-bind:class="{selected : check,over:over}" class="timeSlot free"   v-on:click="onFreeClick()">

                        </td>

                    `,
                data: function () {
                return {
                    over: false
                }
            },
            computed: {
                colSpan: function() {
                    if (this.reservation == undefined)
                        return 0;

                    return this.reservation.TimeSlots;
                },
                unconfirmed: function() {
                    if (this.reservation == undefined)
                        return false;
                    if (this.reservation.State === 6  || this.reservation.State === 5)
                        return true;
                    return false;
                },
                unvisited: function() {
                    if (this.reservation == undefined)
                        return false;
                    if (this.reservation.State === 3)
                        return true;
                    return false;
                },
                display: function() {
                    if (this.timeSlot.Reserved && this.reservation != undefined) {
                        return true;
                    }
                    return false;
                },
                check: function() {
                    if (this.selected.Table !== this.table.Id)
                        return false;

                    return this.selection.indexOf(this.index) > -1;
                },
                stateText: function() {
                    if (this.reservation == null)
                        return "";
                    return this.reservation.StateText;
                }

                },
            mounted() {
                this.$root.$on('drop', data => {
                    this.over = false;
                });
            },
            methods: {
                onFreeClick: function(taken = false) {

                    this.selected.Table = this.table.Id;
                    this.selected.Time = this.timeSlot.Value;
                    this.selected.TimeIndex = this.index;

                    if (this.$root.AddTableMode) {
                        this.$root.addTable();
                        return;
                    }
                    if (!taken)
                        this.selected.Reservation = null;

                },
                dragStart: function(ev) {
                    ev.dataTransfer.setData("reservation", this.reservation.Id);
                    ev.dataTransfer.setData("table", this.table.Id);
                    // console.log(ev);
                },
                dragEnd: function() {
                    this.over = false;
                },
                drop: function(ev) {
                    // ev.dataTransfer.setData("text", ev.target.id);
                    var reservation = ev.dataTransfer.getData("reservation");
                    var changedTable = ev.dataTransfer.getData("table");
                    console.log(reservation);
                    this.selected.Reservation = reservation;
                    this.selected.Table = this.table.Id;
                    this.selected.Time = this.timeSlot.Value;
                    this.selected.TimeIndex = this.index;
                    this.selected.LastReservedTable = changedTable;
                    var _this = this;
                    var newSelectedTime = this.index;
                    var table = this.table.Id;
                    this.$root.changeReservation(function() {
                        _this.selected.Table = table;
                        _this.selected.Time = newSelectedTime;
                    });
                    this.$root.$emit('drop', null);


                },
                allowDrop: function(ev) {
                    ev.preventDefault();
                },
                dragEnter: function() {
                    this.over = true;

                },
                dragLeave: function() {
                    this.over = false;

                },
                onTakenClick: function() {

                    this.selected.Reservation = this.reservation.Id;
                    this.selected.Persons = this.reservation.Persons;
                    this.selected.Name = this.reservation.Name;
                    this.selected.Duration = this.reservation.TimeSlots;
                    this.onFreeClick(true);
                    this.selected.LastReservedTable = this.table.Id;
                },
                confirmReservation: function() {
                    this.$root.changeReservationStatus(3);
                },
                confirmVisit: function() {
                    this.$root.changeReservationStatus(4);
                }


            }
            }
        );


        var v = new Vue({
            el: '#app',
            created: function() {
                this.loadReservations();
                $.connection.hub.start()
                    .done(function() {
                        hub.server.joinPlace(placeId);
                    });


                $.connection.hub.disconnected(function() {
                    console.log("disconected");
                    setTimeout(function() {
                            $.connection.hub.start();
                            console.log("reconect");
                        },
                        5000); // Re-start connection after 5 seconds
                });
            },

            data: {
                DeniedReason: null,
                PlaceId: placeId,
                Selected: {
                    Table: null,
                    format: 'dd.mm.yyyy',
                    Date: moment().format('DD.MM.YYYY'),
                    Time: '',
                    TimeIndex: 0,
                    Duration: 5,
                    Persons: 2,
                    Reservation: null,
                    Name: '',
                    Text: '',
                    TableItems: [],
                    LastReservedTable: 0,
                },
                Reservations: {
                    TimeSlots: [],
                    Tables: [],
                    Reservations: [],
                    Canceled: [],
                    Times: [],
                    MinimumReservationTime: 0,
                },
                AddTableMode: false,
            },
            computed:
            {
                canCreateReservation: function() {
                    return this.Selected.Reservation == null;
                },
                selection: function() {
                    var result = [];
                    for (var i = this.Selected.TimeIndex; i < this.Selected.TimeIndex + this.Selected.Duration; i++) {
                        result.push(i);
                    }
                    return result;
                },
                selectedReservationStatus: function() {
                    if (this.Selected.Reservation) {
                        var res = this.Reservations.TodayReservation[this.Selected.Reservation];
                        return res ? res.State : -1;
                    }
                    return -1;
                }
            },
            methods: {
                dateChanged() {
                    this.Selected.Date = $("#datepicker").val();

                    var date = moment($('#datepicker').datepicker().value(), 'DD.MM.YYYY').locale('@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName');
                    var titleDate = date.format('D.M.YYYY');
                    $('#titleDate').text(titleDate);
                    try {
                        var titleDay = date.format('dddd').capitalize();
                        $('#titleDay').text(titleDay);
                    } catch (e) {
                        var titleDay = date.format('dddd');
                        $('#titleDay').text(titleDay);
                    }
                  
                    this.loadReservations();
                },
                clearReservation() {

                    this.Selected.Name = '';
                    this.Selected.Text = '';
                    this.Selected.Duration = this.Reservations.Times[0].Key;

                },
                cancelReservation() {
                    var r = confirm(" @DbRes.T("confirmCancel","Reservation")");
                    if (r == true) {
                        this.changeReservationStatus(1);
                    }
                },
                changeReservationStatus: function(status, reservationId = null) {
                    if (reservationId == null) {
                        reservationId = this.Selected.Reservation;
                    }
                    $.post(
                        '/Reservation/UpdateStatus/',
                        {
                            id: reservationId,
                            state: status
                        },
                        function (data) {
                          
                        });
                },
                addTable: function() {
                    this.AddTableMode = false;
                    $.post(
                        '/Reservation/AddTable/',
                        {
                            id: this.Selected.Reservation,
                            tableId: this.Selected.Table,

                        },
                        function(data) {
                            // v.loadReservations();
                        });
                },
                addTableStart: function() {
                    this.AddTableMode = true;
                },
                changeReservation: function (callback) {
                   
                    $.post(
                        '/Reservation/ChangeReservation',
                        {
                            id: this.Selected.Reservation,
                            model: this.Selected,
                            tableId: this.Selected.LastReservedTable
                        },
                        function(data) {
                            if (callback)
                                callback();
                          
                         
                        }
                    );
                },
                loadReservations: function() {
                    var _this = this;
                    $.getJSON('/Reservation/PlaceReservation/',
                        {
                            id: placeId,
                            date: this.Selected.Date,
                        },
                        function(json) {
                            _this.Reservations = json;
                            if (json.TimeSlots.length > 0)
                                _this.Selected.Time = json.TimeSlots[0].Value;

                            if (_this.Reservations.Times.length > 0)
                                _this.Selected.Duration =
                                    _this.Reservations.Times[_this.Reservations.MinimumReservationTime].Key;

                        });
                },
                postReservation: function() {
                    var req = $.post(
                        '/Reservation/PostReservation?id=' + '@Model.place.Id',
                        this.Selected,
                        function(data) {
                            //v.loadReservations();
                        });


                }
            }
        });

        hub.client.reload = v.loadReservations;
    </script>
}