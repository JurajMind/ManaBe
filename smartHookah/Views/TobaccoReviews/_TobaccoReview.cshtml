@using smartHookah.Helpers

<div id="tobaccoReview" class="form-horizontal" style="margin-left: auto; margin-right: auto; max-width: 40em">
    <fieldset class="form-group">
        <div class="bmd-label-static">@LocalizationHelper.Translate("_TobaccoRevSmokeQ", "SmokeSession")&nbsp;-&nbsp;<h6 style="display: inline; font-weight: bold">{{review.Smoke + '/10'}}</h6></div>
        <div class="form-control">
            <input class="form-control col-md-12" style="display: inline; position: relative; right:16px" type="range" min="0" max="10" step="1" id="Smoke" v-bind:disabled="edit" v-model="review.Smoke" />
        </div>
    </fieldset>

    <div class="form-group">
        <div class="bmd-label-static">@LocalizationHelper.Translate("_TobaccoRevTobTaste", "SmokeSession")&nbsp;-&nbsp;<h6 style="display: inline; font-weight: bold">{{review.Taste + '/10'}}</h6></div>
        <div class="form-control">
            <input class="form-control col-md-12" style="display: inline; position: relative; right:16px" type="range" min="0" max="10" step="1" id="Taste" v-bind:disabled="edit" v-model="review.Taste" />
        </div>
    </div>

    <div class="form-group">
        <div class="bmd-label-static">@LocalizationHelper.Translate("_TobaccoRevTobaccoQ", "SmokeSession")&nbsp;-&nbsp;<h6 style="display: inline; font-weight: bold">{{review.Quality + '/10'}}</h6></div>
        <div class="form-control">
            <input class="form-control col-md-12" style="display: inline; position: relative; right:16px" type="range" min="0" max="10" step="1" id="Quality" v-bind:disabled="edit" v-model="review.Quality" />
        </div>
    </div>

    <div class="form-group">
        <div class="bmd-label-static">@LocalizationHelper.Translate("_TobaccoRevOverallRating", "SmokeSession")&nbsp;-&nbsp;<h6 style="display: inline; font-weight: bold">{{review.Overall + '/10'}}</h6></div>
        <div class="form-control">
            <input class="form-control col-md-12" style="display: inline; position: relative; right:16px" type="range" min="0" max="10" step="1" id="Rating" v-bind:disabled="edit" v-model="review.Overall" />
        </div>
    </div>

    <div class="form-group">
        <label class="bmd-label-static">@LocalizationHelper.Translate("_TobaccoRevTextReview", "SmokeSession")</label>
        <div class="form-control">
            <textarea  class="form-control col-md-12 review-text" id="Text" v-bind:disabled="edit" v-model="review.Text"></textarea>
        </div>
    </div>

    <div class="form-group">
        <button class="btn btn-primary btn-raised" v-bind:disabled="!edit" v-on:click="edit = !edit">@LocalizationHelper.Translate("Edit", "Common")</button>
        <button class="btn btn-success btn-raised" style="float:right" v-bind:disabled="edit" v-on:click="saveReview()">@LocalizationHelper.Translate("SaveChanges", "Common")</button>
    </div>

</div>

<script type="text/javascript">

    var vm = new Vue({
        el: '#tobaccoReview',

        data: {
            review: {
                Id: '',
                Quality: 0,
                Taste: 0,
                Smoke: 0,
                Overall: 0,
                Text: '',
                SmokeSessionId: ''
            },
            edit: false
        },

        created: function () {
            $.getJSON('/TobaccoReviews/GetReviewVue/',
                {
                    sessionId: this.getSessionId()
                },
                function(data) {
                    if (data != null) {
                        vm.$data.review = data;
                        vm.$data.edit = true;
                        if (getTextLines() < 11) {
                            $("#Text").animate({ rows: getTextLines() }, 'fast');
                        } else {
                            $("#Text").animate({ rows: 10 }, 'fast');
                        }
                    }
                });
        },

        methods: {
            saveReview: function () {
                console.log("saving function");
                
                this.review.SmokeSessionId = this.getSessionId();

                var jqxhr = $.ajax({
                    type: "POST",
                    url: "/TobaccoReviews/SaveVueReview/",
                    data: JSON.stringify({
                        Id: this.review.Id,
                        Quality: this.review.Quality,
                        Taste: this.review.Taste,
                        Smoke: this.review.Smoke,
                        Overall: this.review.Overall,
                        Text: this.review.Text,
                        SmokeSessionId: this.review.SmokeSessionId
                    }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function(data) {
                        vm.$data.review = data;
                        vm.$data.edit = true;
                        console.log("Saved and updated.");
                    }
                }).fail(function(jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    console.log(msg);
                });
            },

            getSessionId: function () {
                return $("input[name='smokeSessionId']").val();
            }
        }
    });

    function getTextLines() {
        var lines = vm.$data.review.Text.split(/\r\n|\r|\n/);
        return lines.length;
    }

    $('#Text').on("focus", function () {
        if (getTextLines() < 10) {
            $(this).animate({ rows: 10 }, 'fast');
        }
    }).on("blur", function () {
        if (getTextLines() < 11) {
            $(this).animate({ rows: getTextLines() }, 'fast');
        }
    });
</script>


