@model smartHookah.Controllers.OrderHookahViewModel

@{
    ViewBag.Title =
    Model.Place.Name;
}

@Styles.Render("~/Content/wizard")

<style>
    .nav-pills .nav-item + .nav-item {
         margin-left: 0rem; 
    }
</style>
<div class="wizard-container" id="app">
    <div class="card wizard-card" data-color="myBlue" id="wizard">
        <form action="" method="" novalidate="novalidate">
            <div class="wizard-header">
                <div>
             
                </div><h3 v-if="CanOrder" class="wizard-title">
                    @Order.Order.orderYourHookah
                </h3>
                <h3 v-else class="wizard-title">
                    @Order.Order.menu
                </h3>
                
                <div style="margin-left: 40px"class="row" v-if="priceGroupSelect">
                    <button class="btn btn-raised"type="button" v-for="pc in Menu.PriceGroup"  v-on:click="changePg(pc.Id)">{{pc.Name}} {{pc.Price}} czk</button>
                </div>
                
                <div class="clearfix"></div>
                <h5 v-if="CanOrder">@Order.Order.currentOrderPrice {{totalPrice}} @Model.Place.Currency</h5>
                <div class="pull-right">
                    <input type="button" class="btn btn-next btn-fill btn-primary btn-wd" name="next" value="@Order.Order.next" style="">
                    <input type="button" class="btn btn-finish btn-fill btn-primary btn-wd" v-if="CanOrder" name="finish"  value="@Order.Order.finish" onclick="$('#confirm').modal('show')" style="display: none;">
                </div>
                <div class="pull-left">
                    <input type="button" class="btn btn-previous btn-fill btn-default btn-wd disabled" name="previous" value="@Order.Order.previous">
                </div>
                
            </div>
            <div class="wizard-navigation">
                <ul class="nav nav-pills" role="tablist" style="padding: 12px 0px">
                    <li class="nav-item active"><a href="#tobacco" data-toggle="tab" aria-expanded="true">@Home.Home.tobacco</a></li>
                    <li class="nav-item"><a href="#hookah" data-toggle="tab" aria-expanded="false">@Home.Home.hookah</a></li>
                    <li class="nav-item"><a href="#bowl" data-toggle="tab" aria-expanded="false">@Home.Home.bowl</a></li>
                    <li class="nav-item"><a href="#description" data-toggle="tab" aria-expanded="false">Extra</a></li>
                </ul>
                <div class="moving-tab" style="width: 154.25px; transform: translate3d(-8px, 0px, 0px); transition: transform 0s;">Location</div></div>

            <div class="tab-content container">
                <div class="tab-pane active" role="tab" id="tobacco">
                    <div class="" style="margin: 10px;">
                        <h4 v-if="CanOrder" class="info-text">@Order.Order.whatTobacco</h4>
              
                        <div v-if="CanOrder" v-bind:class="{hidden : !tobaccohelp }"class="form-group bmd-form-group">
                            <label class="bmd-label-floating" for="tastePreference">@Order.Order.yourTastePreferences</label>
                            <input class="form-control" v-model="Selected.TobaccoDescription" id="tastePreference"/>
                        </div>

                        <div class="row">
                            <item-box v-for="item in Menu.Tobacco" :key="item.Name"
                                      v-bind:item="item" v-bind:selection="Selected.Tobacco" v-bind:matrix="actualPrice" v-bind:canorder="CanOrder" v-bind:max="4">

                            </item-box>
                        </div>

                    </div>
                    <button v-if="CanOrder" type="button" class="btn btn-warning" v-on:click="randomTobacco" href="#">@Order.Order.randomMix<i class="fa fa-random"></i></button>
                    <hr/>
                    <h4>@Order.Order.selectPreparedMixes</h4>
                    <div class="row" style="margin: 10px;">
                        <mix-box v-for="item in Menu.Mixes" :key="item.Name"
                                  v-bind:item="item" v-bind:selection="Selected.Tobacco" v-bind:max="1" v-bind:matrix="actualPrice">

                        </mix-box>
                    </div>
                </div>
                <div class="tab-pane" id="hookah" role="tab">
                    <h4 v-if="CanOrder" class="info-text">@Order.Order.whatHookah</h4>
                 
                        <div class="row justify-content-start" style="margin: 10px;">
                            <gear-box v-for="item in Menu.Hookah" :key="item.Name"
                                      v-bind:item="item" v-bind:selection="Selected.Hookah" v-bind:max="1" v-bind:matrix="actualPrice" v-bind:canorder="CanOrder">

                            </gear-box>
                        </div>
                    </div>
               

                <div class="tab-pane" id="bowl" role="tab">
                    <h4 v-if="CanOrder" class="info-text">@Order.Order.whatBowl</h4>
                    <div class="row"  style="margin: 10px;">
                        <gear-box v-for="item in Menu.Bowl" :key="item.Name"
                                  v-bind:item="item" v-bind:selection="Selected.Bowl" v-bind:canorder="CanOrder" v-bind:max="1" v-bind:matrix="actualPrice">

                        </gear-box>
                    </div>
                </div>

            <div class="tab-pane" id="description" role="tab">
                <h4 class="info-text"> @Order.Order.dropExtra </h4>
                <div  v-if="CanOrder" class="row">
                 
                    <div class="col-sm-6">
                        <div class="form-group bmd-form-group">
                            <label for="descriptionText"class="bmd-label-floating">@Order.Order.cantChoose</label>
                            <textarea v-model="Selected.Description" class="form-control" id="descriptionText" placeholder="" rows="9"></textarea>
                        </div>

                    </div>
                    <div class="col-sm-4">
                        <div class="form-group label-floating">
                            <h4 class="info-text">Extra items</h4>
                            <extra-item v-for="item in Menu.Extra" :key="item.Name"
                                        v-bind:item="item" v-bind:selection="Selected.Extra">

                            </extra-item>
                        </div>
                    </div>
                </div>
                <div v-else class="card-deck">
                    <div v-for="item in Menu.Extra" :key="item.Name">
                        <div class="card extraCard">
                            <h4> {{item.Name}}</h4>
                        </div>
                    </div>
                </div>
            </div>
                <div class="wizard-footer">
                    <div class="clearfix"></div>
                    <div class="pull-right">
                        <input type="button" class="btn btn-next btn-fill btn-primary btn-wd" name="next" value="@Order.Order.next" style="">
                        <input type="button"
                               v-if="CanOrder"
                               class="btn btn-finish btn-fill btn-primary btn-wd"
                               name="finish"
                               value="@Order.Order.finish"
                               onclick="$('#confirm').modal('show')" style="display: none;">
                    </div>
                    <div class="pull-left">
                        <input type="button" class="btn btn-previous btn-fill btn-default btn-wd disabled" name="previous" value="@Order.Order.previous">
                    </div>

                </div></div>
        </form>
    </div>
    <div class="modal fade" id="confirm">
        <div class="modal-dialog" role="dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">@Order.Order.orderConfirm</h4>
                </div>
                <div class="modal-body">

                    <dl class="dl-horizontal">
                        <dt>
                            @Home.Home.tobacco:
                        </dt>
                        
                        <dd v-for="item in Selected.Tobacco">
                            <confirm-table-item v-bind:Menu="Menu.Tobacco" v-bind:id="item"></confirm-table-item>
                        </dd>
                        <dd v-bind:class="{hidden : !tobaccohelp }">
                            {{Selected.TobaccoDescription}}
                        </dd>
                        
                        <dt>@Home.Home.hookah</dt>
                        <dd v-for="item in Selected.Hookah">
                            <confirm-table-item v-bind:Menu="Menu.Hookah" v-bind:id="item"></confirm-table-item>
                        </dd>

                        <dt>@Home.Home.bowl</dt>
                        <dd v-for="item in Selected.Bowl">
                            <confirm-table-item v-bind:Menu="Menu.Bowl" v-bind:id="item"></confirm-table-item>
                        </dd>
                        <dt>Extra</dt>
                        <dd v-for="item in Selected.Extra">
                            <confirm-table-item v-bind:Menu="Menu.Extra" v-bind:id="item"></confirm-table-item>
                        </dd>
                        <dt>@Order.Order.description</dt>
                        <dd>{{Selected.Description}}</dd>

                    </dl>
                    
                    <h4>@Order.Order.orderPrice : {{totalPrice}} @Model.Place.Currency</h4>


                </div>
                <div class="modal-footer">
                    <button onclick="v.postOrder()" type="button" class="btn btn-success btn-raised" >@Order.Order.order</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">@Order.Order.close</button>
                </div>


                <!-- /.modal-content -->

            </div>
            <!-- /.modal-dialog -->
        </div>
    </div>
</div>




@section scripts
{
    @Scripts.Render("~/bundles/wizard")
    @Scripts.Render("~/bundles/shake")
    @Scripts.Render("~/bundles/vue")
    @Scripts.Render("~/bundles/babel")
    <script type="text/javascript" type="text/babel">
        var placeId = @Model.Place.Id;
        var reservationId = @(Model.Reservation == null ? "0":Model.Reservation.Id.ToString());
        var CanOrder = @(Model.CanOrder ?"true":"false");
        Vue.component('confirm-table-item',
            {
                props: ["menu", "id"],
                computed: {
                    label: function() {
                        var result = this.menu.find(x => x.Id === this.id);


                        var brand = '';
                        if (result && result.Brand) {
                            brand = result.Brand;
                        }

                        return result ? brand + ' ' + result.Name : null;
                    },
                    price: function() {
                        var result = this.menu.find(x => x.Id === this.id);

                        if (!result)
                            return "";

                        return result.Price ? ('+'+ result.Price) : '';
                    },
                },
                template:
                    `<dl>{{label}} {{price}}</dl>`
            }
        );


        Vue.component('extra-item',
            {
                props: ["item", "selection"],
                template:
                    `<div>
                    
                    <div class="checkbox">
                    <label>
                      <input  class="form-control" value="on"  type="checkbox"  v-on:click="select">  {{item.Name}}
                     <span class="price" col-xs-3 v-if="item.Price">+{{item.Price}} {{item.Currency}}</span>
                    </label>
                  </div>                 
              
             
                </div>
`,
                methods: {
                    select: function() {
                        var index = this.selection.indexOf(this.item.Id);
                        if (index >= 0) {
                            this.selection.splice(index, 1);
                        } else {
                            this.selection.push(this.item.Id);
                        }
                    }
                }
            }
        );

        var itemBox = Vue.component('item-box',
            {
                computed: {
                    selected: function() {
                        return this.selection.indexOf(this.item.Id) > -1;
                    },
                    price : function() {
                        return this.matrix[this.item.Id];
                    },
                    show : function() {
                        return this.price >= 0;
                    }
                },
                props: ["item", "selection", "max","matrix","canorder"],
                template:
                    `<div v-if="show" class=" card col-xs-6 col-sm-3 col-md-2 tobaccoBox  text-center" v-on:click="select" v-bind:class="{active : selected}">
                        <div class="card-block">
                    <span class="card-title">{{item.Brand}} {{item.Name}}</span>
                      <span class="card-subtitle" v-if="item.groupPrice"> + {{price}} {{item.Currency}} </span> 
                      </div>
                        </div>`,
                methods: {
                    select: function () {
                        if (!this.canorder)
                            return true;
                        if (this.selected) {
                            if (this.selection.length === 1) {
                                return;
                            };
                            var itemId = this.item.Id;
                            var index = this.selection.indexOf(itemId);
                            console.log(index);
                            this.selection.splice(index, 1);
                        } else {
                            while (this.selection.length + 1 > this.max) {
                                this.selection.pop();
                            }
                            this.selection.push(this.item.Id);
                        }
                    }
                }
            });

        Vue.component('mix-box',
            {
                extends: itemBox,
                template:
                `<div class="card col-xs-6 col-sm-3 col-md-2  tobaccoBox" v-on:click="select" v-bind:class="{active : selected}"> 
        <div class="card-block">
                <span class="card-title">{{item.Name}}</span>
                </div>
                        </div>`,
            });

        Vue.component('gear-box',
            {
                extends: itemBox,
                template:
                    `<div v-if="show" class="card col-xs-6 col-sm-4 col-md-3 mr-1 tobaccoBox  text-center" v-on:click="select" v-bind:class="{active : selected}"> 
            <img class="card-img-top gearImg" v-bind:src="item.Picture" alt="Item picture">
           
                 <div class="card-block">
                    <span class="card-title">{{item.Brand}} {{item.Name}}</span>                
                             <span class="card-subtitle price" v-if="price"> + {{price}} {{item.Currency}}</span>  
                             </div>
                      </div>`,
            });


        var v = new Vue({
            el: '#app',
            created: function() {
                var _this = this;
                $.getJSON('/Places/GetPlaceMenu/', {
                    id: placeId,
                    CanOrder : CanOrder
                },
                    function(json) {
                        _this.Menu = json;
                        _this.Selected.PriceGroup = json.PriceGroup[0].Id;
                    });
            },

            data: {
                PlaceId: '@Model.Place.Id',
                CanOrder: CanOrder,
                Selected: {
                    Bowl: [0],
                    Hookah: [0],
                    Tobacco: [0],
                    Extra: [],
                    Description: '',
                    TobaccoDescription: '',
                    Reservation: reservationId,
                    PriceGroup : 0
                },
                Menu: {
                    Hookah: [],
                    Bowl: [],
                    Tobacco: [],
                    Mixes: [],
                    Extra: [],
                    BasePrice: 0.00,
                    PriceMatrix: [],
                    PriceGroup : []
                }
            },
            computed: {
                priceGroupSelect:function() {
                    return this.Menu.PriceGroup.length > 1;
                },
                actualPrice: function() {
                    return this.Menu.PriceMatrix[this.Selected.PriceGroup];
                },
                tobaccohelp: function() {
                    return this.Selected.Tobacco.indexOf(0) > -1;
                },
                totalPrice: function() {

                    function returnPrice(menu, selected,prices, all =false) {
                        var hookahPrice = 0;

                        for (i = 0; i < selected.length; i++) {

                            if (prices === undefined || prices == null)
                                return 0;
                            var inMenuPrice = prices[selected[i]];

                            if (hookah) {
                                if (all) {
                                    hookahPrice = hookahPrice + inMenuPrice;
                                } else {
                                    if (hookahPrice < inMenuPrice)
                                        hookahPrice = inMenuPrice;
                                }

                            };
                        }


                        return hookahPrice;
                    }

                    var hookahPrice = returnPrice(this.Menu.Hookah, this.Selected.Hookah,this.actualPrice);
                    var bowlPrice = returnPrice(this.Menu.Bowl, this.Selected.Bowl, this.actualPrice);
                    var tobaccoPrice = returnPrice(this.Menu.Tobacco, this.Selected.Tobacco, this.actualPrice);
                    //var extra = returnPrice(this.Menu.Extra, this.Selected.Extra, this.actualPrice, true);

                    var selectedPg = this.Selected.PriceGroup;
                    var basePrice = this.Menu.PriceGroup.filter(function(obj) {
                        return obj.Id === selectedPg;
                    });

                    basePrice = basePrice[0];
                    if (basePrice === undefined || basePrice === null)
                        return 0;

                    return basePrice.Price + hookahPrice + bowlPrice + tobaccoPrice;// + extra;
                }
            },
            methods: {
                changePg:function(pc) {
                    this.Selected.PriceGroup = pc;
                },
                randomTobacco: function() {
                    this.Selected.Tobacco.length = 0;
                    var count = getRandomInt(2, 4);

                    for (var i = 0; i < count; i++) {
                        var index = getRandomInt(1, this.Menu.Tobacco.length);
                        this.Selected.Tobacco.push(this.Menu.Tobacco[index].Id);
                    }

                    if ("vibrate" in navigator) {
                        navigator.vibrate([500, 300, 100]);
                    }

                },
                postOrder: function() {
                    var req = $.post(
                        '/Places/PostOrder?id=' + this.PlaceId,
                        this.Selected,
                        function(data) {

                            if (data.success) {
                                window.location.href = '/Places/OrderDetails/' + data.order;
                            }
                            console.log(data);
                        });


                }
            }
        });

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }


        var myShakeEvent = new Shake({
            threshold: 15,
            timeout: 1000
        });
        myShakeEvent.start();
        window.addEventListener('shake', shakeEventDidOccur, false);

        function shakeEventDidOccur() {
            v.randomTobacco();
        }


      

    </script>
}
